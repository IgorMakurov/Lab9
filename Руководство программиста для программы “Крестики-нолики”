1. Назначение и условия применения программы

Назначение: Программа “Крестики-нолики” представляет собой интерактивную игру, в которой пользователь может играть против искусственного интеллекта (ИИ) в классическую игру “Крестики-нолики” на поле 3x3. Программа предназначена для развлечения и демонстрации базовых концепций программирования, включая графический интерфейс пользователя (GUI) на основе Tkinter, логику игры и алгоритм Minimax для ИИ.
Функции:
Отображение игрового поля с помощью графических кнопок.
Предоставление игроку выбора, играть за крестики (X) или нолики (O).
Обеспечение возможности пользователю совершать ходы, кликая по кнопкам игрового поля.
Реализация логики ходов ИИ с использованием алгоритма Minimax.
Проверка условий выигрыша и ничьи.
Отображение сообщений о результатах игры (победа, поражение, ничья).
Предоставление возможности сыграть еще раз или завершить программу.
Условия применения:
Операционная система: Любая ОС, поддерживающая Python и Tkinter (Windows, macOS, Linux).
Интерпретатор Python: Версия 3.6 или выше.
Библиотеки Python:
tkinter (стандартная библиотека для создания GUI).
random (стандартная библиотека для генерации случайных чисел).
Требования к ресурсам:
Объем оперативной памяти: минимальный, достаточный для выполнения интерпретатора Python и графического интерфейса Tkinter (рекомендуется от 128 МБ).
Периферийные устройства: стандартный дисплей, мышь (или другое устройство ввода).

2. Характеристики программы

Режим работы: Интерактивный, с графическим интерфейсом пользователя. Игра происходит в пошаговом режиме.
Время выполнения: Время выполнения зависит от скорости работы компьютера и скорости принятия решений пользователем. Ходы ИИ выполняются практически мгновенно.
Алгоритм ИИ: ИИ использует алгоритм Minimax для выбора оптимального хода, стремясь к победе или ничьей.
Средства контроля правильности выполнения:
Программа автоматически отслеживает ходы игроков и определяет победителя или ничью.
Сообщения о завершении игры выводятся в виде модальных диалоговых окон.
Предусмотрена защита от некорректных ходов (повторного выбора занятой ячейки).
Тестирование проводилось путем выполнения различных игровых сценариев.
Особенности:
Реализована возможность выбора пользователем роли (за крестики или нолики).
Оптимизированный алгоритм Minimax обеспечивает “интеллектуальное” поведение ИИ.
Простой и понятный графический интерфейс.
Возможность повторной игры после окончания текущей.

3. Обращение к программе

Способ запуска:
Сохраните код программы в файле с расширением .py (например, tictactoe.py).
Откройте командную строку или терминал.
Перейдите в каталог, где расположен файл с программой.
Выполните команду python tictactoe.py.
Передача параметров: Программа не принимает параметры командной строки.
Завершение работы: Программа завершает работу при нажатии кнопки “Нет” в запросе о повторной игре, закрытии главного окна или возникновении ошибки.

4. Входные и выходные данные

Входные данные:
Выбор пользователя, за какую сторону играть: “X” или “O”.
Клики мыши по кнопкам игрового поля, определяющие ход игрока.
Ответ пользователя на запрос о повторной игре (“Да” или “Нет”).
Выходные данные:
Изменение текста на кнопках игрового поля, отображающих ходы игроков (“X” или “O”).
Модальные диалоговые окна, информирующие о результатах игры (“Победил игрок”, “Победил ИИ”, “Ничья”).
Модальное диалоговое окно с запросом о повторной игре.
Кодирование: Входные и выходные данные представляются строками и целыми числами в кодировке UTF-8 (стандартно для Python).

5. Сообщения

Сообщения пользователю (выводятся в модальных окнах):
“Выбери за кого играть:”: Появляется в начале игры, предлагает пользователю выбрать, играть за X или O.
“Игрок (X) победил!” или “Игрок (O) победил!”: Сообщает о победе игрока.
“ИИ (X) победил!” или “ИИ (O) победил!”: Сообщает о победе ИИ.
“Ничья!”: Сообщает о ничейном результате игры.
“Хотите сыграть еще раз?”: Появляется по окончании игры, предлагает повторить игру.
Обработка сообщений:
Сообщения о победе или ничьей: носят информационный характер.
Запрос о повторной игре: предполагает от пользователя нажатие кнопок “Да” (игра продолжится) или “Нет” (программа завершится).
